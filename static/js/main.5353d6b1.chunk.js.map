{"version":3,"sources":["MC.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["MainComponent","state","photo_data","search_term","qp","Axios","get","data","this","setState","results","e","key","loadData","target","value","elements","map","i","className","src","urls","small","type","onChange","onKeyPress","keypress","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"qRAMqBA,E,YACjB,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,WAAY,GACZC,YAAY,YAJN,E,8GAQCC,G,sFACMC,IAAMC,IAAN,oIAAuIF,EAAvI,mB,OAAbG,E,OACJC,KAAKC,SAAS,CACVP,WAAYK,EAAKA,KAAKG,U,oIAIrBC,GACL,GAAc,UAAVA,EAAEC,IAGN,OAAO,KAFPJ,KAAKK,SAASF,EAAEG,OAAOC,S,mJAMvBP,KAAKK,SAAS,Y,mIAGR,IAAD,OACCG,EAAWR,KAAKP,MAAMC,WAAWe,IAAI,SAACV,EAAMW,GAC9C,OACI,yBAAKN,IAAKM,EAAGC,UAAU,UACnB,yBAAKC,IAAKb,EAAKc,KAAKC,WAIhC,OACI,oCACA,yBAAKH,UAAU,aACX,uDACA,wDACJ,2BAAOI,KAAK,OAAOC,SAAU,SAAAb,GAAC,OAAI,EAAKF,SAAS,CAACN,YAAYQ,EAAEG,OAAOC,SAASU,WAAY,SAAAd,GAAC,OAAI,EAAKe,SAASf,MAE9G,4BAAQgB,QAAU,SAAAhB,GAAC,OAAI,EAAKE,SAAS,EAAKZ,MAAME,eAAhD,SACA,+DAEA,6BACQ,kBAAC,IAAD,CACJgB,UAAU,iBAETH,S,GAjD0BY,aCO5BC,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCIcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.5353d6b1.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport 'axios'\nimport Masonry from 'react-masonry-component';\nimport Axios from 'axios';\n\n\nexport default class MainComponent extends Component {\n    constructor() {\n        super();\n        this.state = {\n            photo_data: [],\n            search_term:\"activism\"\n        }\n    }\n\n    async loadData(qp) {\n        let data = await Axios.get(`https://api.unsplash.com/search/photos/?client_id=3f15f9dc28658acd19f6acf38c8d8ebd6c08942a5d0d9114aa024e91b3ac8f0c&query=\"${qp}\"&per_page=100`)\n        this.setState({\n            photo_data: data.data.results\n        })\n    }\n\n    keypress(e) {\n        if (e.key === \"Enter\")\n        this.loadData(e.target.value)\n        else\n        return null\n    }\n\n    async componentWillMount() {\n        this.loadData(\"activism\")\n    }\n\n    render() {\n        const elements = this.state.photo_data.map((data, i) => {\n            return (\n                <div key={i} className=\"Holder\">\n                    <img src={data.urls.small}></img>\n                </div>\n            )\n        })\n        return (\n            <>\n            <div className=\"input-box\">\n                <h2>What Do You Care About?</h2>\n                <h4>Type below and hit enter</h4>\n            <input type=\"text\" onChange={e => this.setState({search_term:e.target.value})} onKeyPress={e => this.keypress(e)}>\n            </input>\n            <button onClick={ e => this.loadData(this.state.search_term)}>Enter</button>\n            <h5>A media project by Joe Serpico</h5>\n            </div>\n            <div>\n                    <Masonry\n                className=\"masonry-class\"\n                >\n                {elements} \n                </Masonry>\n            </div>\n            </>\n        )\n    }\n\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainComponent from './MC'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}